// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Direction;
use crate::GlobalProxy;
use crate::Object;
use crate::PipewireObject;
use crate::Proxy;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Endpoint(Object<ffi::WpEndpoint, ffi::WpEndpointClass>) @extends GlobalProxy, Proxy, Object, @implements PipewireObject;

    match fn {
        type_ => || ffi::wp_endpoint_get_type(),
    }
}

pub const NONE_ENDPOINT: Option<&Endpoint> = None;

pub trait EndpointExt: 'static {
    #[doc(alias = "wp_endpoint_get_direction")]
    #[doc(alias = "get_direction")]
    fn direction(&self) -> Direction;

    #[doc(alias = "wp_endpoint_get_media_class")]
    #[doc(alias = "get_media_class")]
    fn media_class(&self) -> Option<glib::GString>;

    #[doc(alias = "wp_endpoint_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "direction")]
    fn connect_direction_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "media-class")]
    fn connect_media_class_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Endpoint>> EndpointExt for O {
    fn direction(&self) -> Direction {
        unsafe {
            from_glib(ffi::wp_endpoint_get_direction(self.as_ref().to_glib_none().0))
        }
    }

    fn media_class(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_endpoint_get_media_class(self.as_ref().to_glib_none().0))
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_endpoint_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "direction")]
    fn connect_direction_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_direction_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Endpoint>
        {
            let f: &F = &*(f as *const F);
            f(&Endpoint::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::direction\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_direction_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media-class")]
    fn connect_media_class_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_class_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Endpoint>
        {
            let f: &F = &*(f as *const F);
            f(&Endpoint::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-class\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_media_class_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WpEndpoint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Endpoint>
        {
            let f: &F = &*(f as *const F);
            f(&Endpoint::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Endpoint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Endpoint")
    }
}
