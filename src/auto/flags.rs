// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    pub struct InitFlags: u32 {
        const PIPEWIRE = 1;
        const SPA_TYPES = 2;
        const SET_PW_LOG = 4;
        const SET_GLIB_LOG = 8;
        const ALL = 15;
    }
}

impl fmt::Display for InitFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for InitFlags {
    type GlibType = ffi::WpInitFlags;

    fn into_glib(self) -> ffi::WpInitFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpInitFlags> for InitFlags {
    unsafe fn from_glib(value: ffi::WpInitFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for InitFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_init_flags_get_type()) }
    }
}

impl glib::value::ValueType for InitFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for InitFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for InitFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct InterestMatch: u32 {
        const NONE = 0;
        const GTYPE = 1;
        const PW_GLOBAL_PROPERTIES = 2;
        const PW_PROPERTIES = 4;
        const G_PROPERTIES = 8;
    }
}

impl fmt::Display for InterestMatch {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for InterestMatch {
    type GlibType = ffi::WpInterestMatch;

    fn into_glib(self) -> ffi::WpInterestMatch {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpInterestMatch> for InterestMatch {
    unsafe fn from_glib(value: ffi::WpInterestMatch) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for InterestMatch {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_interest_match_get_type()) }
    }
}

impl glib::value::ValueType for InterestMatch {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for InterestMatch {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for InterestMatch {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct InterestMatchFlags: u32 {
        const NONE = 0;
        const CHECK_ALL = 1;
    }
}

impl fmt::Display for InterestMatchFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for InterestMatchFlags {
    type GlibType = ffi::WpInterestMatchFlags;

    fn into_glib(self) -> ffi::WpInterestMatchFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpInterestMatchFlags> for InterestMatchFlags {
    unsafe fn from_glib(value: ffi::WpInterestMatchFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for InterestMatchFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_interest_match_flags_get_type()) }
    }
}

impl glib::value::ValueType for InterestMatchFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for InterestMatchFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for InterestMatchFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct LookupDirs: u32 {
        const ENV_CONFIG = 1;
        const ENV_DATA = 2;
        const XDG_CONFIG_HOME = 1024;
        const ETC = 2048;
        const PREFIX_SHARE = 4096;
    }
}

impl fmt::Display for LookupDirs {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for LookupDirs {
    type GlibType = ffi::WpLookupDirs;

    fn into_glib(self) -> ffi::WpLookupDirs {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpLookupDirs> for LookupDirs {
    unsafe fn from_glib(value: ffi::WpLookupDirs) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for LookupDirs {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_lookup_dirs_get_type()) }
    }
}

impl glib::value::ValueType for LookupDirs {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for LookupDirs {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for LookupDirs {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct MetadataFeatures: u32 {
        const DATA = 65536;
    }
}

impl fmt::Display for MetadataFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for MetadataFeatures {
    type GlibType = ffi::WpMetadataFeatures;

    fn into_glib(self) -> ffi::WpMetadataFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpMetadataFeatures> for MetadataFeatures {
    unsafe fn from_glib(value: ffi::WpMetadataFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for MetadataFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_metadata_features_get_type()) }
    }
}

impl glib::value::ValueType for MetadataFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for MetadataFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for MetadataFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct NodeFeatures: u32 {
        const PORTS = 65536;
    }
}

impl fmt::Display for NodeFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for NodeFeatures {
    type GlibType = ffi::WpNodeFeatures;

    fn into_glib(self) -> ffi::WpNodeFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpNodeFeatures> for NodeFeatures {
    unsafe fn from_glib(value: ffi::WpNodeFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for NodeFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_node_features_get_type()) }
    }
}

impl glib::value::ValueType for NodeFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for NodeFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for NodeFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct PluginFeatures: u32 {
        const ENABLED = 1;
    }
}

impl fmt::Display for PluginFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for PluginFeatures {
    type GlibType = ffi::WpPluginFeatures;

    fn into_glib(self) -> ffi::WpPluginFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpPluginFeatures> for PluginFeatures {
    unsafe fn from_glib(value: ffi::WpPluginFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for PluginFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_plugin_features_get_type()) }
    }
}

impl glib::value::ValueType for PluginFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for PluginFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for PluginFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct ProxyFeatures: u32 {
        const PROXY_FEATURE_BOUND = 1;
        const PIPEWIRE_OBJECT_FEATURE_INFO = 16;
        const PIPEWIRE_OBJECT_FEATURE_PARAM_PROPS = 32;
        const PIPEWIRE_OBJECT_FEATURE_PARAM_FORMAT = 64;
        const PIPEWIRE_OBJECT_FEATURE_PARAM_PROFILE = 128;
        const PIPEWIRE_OBJECT_FEATURE_PARAM_PORT_CONFIG = 256;
        const PIPEWIRE_OBJECT_FEATURE_PARAM_ROUTE = 512;
    }
}

impl fmt::Display for ProxyFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for ProxyFeatures {
    type GlibType = ffi::WpProxyFeatures;

    fn into_glib(self) -> ffi::WpProxyFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpProxyFeatures> for ProxyFeatures {
    unsafe fn from_glib(value: ffi::WpProxyFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for ProxyFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_proxy_features_get_type()) }
    }
}

impl glib::value::ValueType for ProxyFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ProxyFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for ProxyFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct SessionItemFeatures: u32 {
        const ACTIVE = 1;
        const EXPORTED = 2;
    }
}

impl fmt::Display for SessionItemFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for SessionItemFeatures {
    type GlibType = ffi::WpSessionItemFeatures;

    fn into_glib(self) -> ffi::WpSessionItemFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpSessionItemFeatures> for SessionItemFeatures {
    unsafe fn from_glib(value: ffi::WpSessionItemFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for SessionItemFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_session_item_features_get_type()) }
    }
}

impl glib::value::ValueType for SessionItemFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SessionItemFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for SessionItemFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    pub struct SpaDeviceFeatures: u32 {
        const ENABLED = 65536;
    }
}

impl fmt::Display for SpaDeviceFeatures {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for SpaDeviceFeatures {
    type GlibType = ffi::WpSpaDeviceFeatures;

    fn into_glib(self) -> ffi::WpSpaDeviceFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::WpSpaDeviceFeatures> for SpaDeviceFeatures {
    unsafe fn from_glib(value: ffi::WpSpaDeviceFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for SpaDeviceFeatures {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::wp_spa_device_features_get_type()) }
    }
}

impl glib::value::ValueType for SpaDeviceFeatures {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SpaDeviceFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for SpaDeviceFeatures {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

