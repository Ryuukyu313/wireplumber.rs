// Generated by gir (https://github.com/gtk-rs/gir @ 0.14-2021-10-08)
// from /nix/store/7i7hi0ivv21w1n2n5b9gy7lfrhnkis9p-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/l8nlsw7p6xi30lna4gq3mvd574njnmly-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::Object;
use glib::object::IsA;
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "WpPlugin")]
    pub struct Plugin(Object<ffi::WpPlugin, ffi::WpPluginClass>) @extends Object;

    match fn {
        type_ => || ffi::wp_plugin_get_type(),
    }
}

impl Plugin {
    #[doc(alias = "wp_plugin_find")]
    pub fn find(core: &Core, plugin_name: &str) -> Option<Plugin> {
        unsafe {
            from_glib_full(ffi::wp_plugin_find(core.to_glib_none().0, plugin_name.to_glib_none().0))
        }
    }
}

pub const NONE_PLUGIN: Option<&Plugin> = None;

pub trait PluginExt: 'static {
    #[doc(alias = "wp_plugin_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;

    #[doc(alias = "wp_plugin_register")]
    fn register(&self);
}

impl<O: IsA<Plugin>> PluginExt for O {
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_plugin_get_name(self.as_ref().to_glib_none().0))
        }
    }

    fn register(&self) {
        unsafe {
            ffi::wp_plugin_register(self.as_ref().to_glib_full());
        }
    }
}
