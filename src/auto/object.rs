// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::ObjectFeatures;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct Object(Object<ffi::WpObject, ffi::WpObjectClass>);

    match fn {
        type_ => || ffi::wp_object_get_type(),
    }
}

pub const NONE_OBJECT: Option<&Object> = None;

pub trait ObjectExt: 'static {
    //#[doc(alias = "wp_object_activate")]
    //fn activate<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + Send + 'static>(&self, features: ObjectFeatures, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P);

    //
    //fn activate_future(&self, features: ObjectFeatures) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>>;

    //#[doc(alias = "wp_object_activate_closure")]
    //fn activate_closure(&self, features: ObjectFeatures, cancellable: /*Ignored*/Option<&gio::Cancellable>, closure: /*Ignored*/&glib::Closure);

    #[doc(alias = "wp_object_deactivate")]
    fn deactivate(&self, features: ObjectFeatures);

    #[doc(alias = "wp_object_get_active_features")]
    #[doc(alias = "get_active_features")]
    fn active_features(&self) -> ObjectFeatures;

    #[doc(alias = "wp_object_get_core")]
    #[doc(alias = "get_core")]
    fn core(&self) -> Option<Core>;

    #[doc(alias = "wp_object_get_supported_features")]
    #[doc(alias = "get_supported_features")]
    fn supported_features(&self) -> ObjectFeatures;

    #[doc(alias = "wp_object_update_features")]
    fn update_features(&self, activated: ObjectFeatures, deactivated: ObjectFeatures);

    #[doc(alias = "active-features")]
    fn connect_active_features_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "supported-features")]
    fn connect_supported_features_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Object>> ObjectExt for O {
    //fn activate<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + Send + 'static>(&self, features: ObjectFeatures, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:wp_object_activate() }
    //}

    //
    //fn activate_future(&self, features: ObjectFeatures) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    obj.activate(
        //        features,
        //        Some(&cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );

        //    cancellable
        //}))
    //}

    //fn activate_closure(&self, features: ObjectFeatures, cancellable: /*Ignored*/Option<&gio::Cancellable>, closure: /*Ignored*/&glib::Closure) {
    //    unsafe { TODO: call ffi:wp_object_activate_closure() }
    //}

    fn deactivate(&self, features: ObjectFeatures) {
        unsafe {
            ffi::wp_object_deactivate(self.as_ref().to_glib_none().0, features);
        }
    }

    fn active_features(&self) -> ObjectFeatures {
        unsafe {
            ffi::wp_object_get_active_features(self.as_ref().to_glib_none().0)
        }
    }

    fn core(&self) -> Option<Core> {
        unsafe {
            from_glib_full(ffi::wp_object_get_core(self.as_ref().to_glib_none().0))
        }
    }

    fn supported_features(&self) -> ObjectFeatures {
        unsafe {
            ffi::wp_object_get_supported_features(self.as_ref().to_glib_none().0)
        }
    }

    fn update_features(&self, activated: ObjectFeatures, deactivated: ObjectFeatures) {
        unsafe {
            ffi::wp_object_update_features(self.as_ref().to_glib_none().0, activated, deactivated);
        }
    }

    #[doc(alias = "active-features")]
    fn connect_active_features_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_features_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WpObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active-features\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_active_features_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "supported-features")]
    fn connect_supported_features_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_supported_features_trampoline<P, F: Fn(&P) + 'static>(this: *mut ffi::WpObject, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer)
            where P: IsA<Object>
        {
            let f: &F = &*(f as *const F);
            f(&Object::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::supported-features\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_supported_features_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Object {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Object")
    }
}
