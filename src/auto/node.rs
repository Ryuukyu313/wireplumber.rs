// Generated by gir (https://github.com/gtk-rs/gir @ 0.14-2021-10-08)
// from /nix/store/7i7hi0ivv21w1n2n5b9gy7lfrhnkis9p-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/l8nlsw7p6xi30lna4gq3mvd574njnmly-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::GlobalProxy;
use crate::Iterator;
use crate::NodeState;
use crate::Object;
use crate::ObjectInterest;
use crate::PipewireObject;
use crate::Port;
use crate::Properties;
use crate::Proxy;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "WpNode")]
    pub struct Node(Object<ffi::WpNode, ffi::WpNodeClass>) @extends GlobalProxy, Proxy, Object, @implements PipewireObject;

    match fn {
        type_ => || ffi::wp_node_get_type(),
    }
}

impl Node {
    #[doc(alias = "wp_node_new_from_factory")]
    #[doc(alias = "new_from_factory")]
    pub fn from_factory(core: &Core, factory_name: &str, properties: Option<&Properties>) -> Option<Node> {
        unsafe {
            from_glib_full(ffi::wp_node_new_from_factory(core.to_glib_none().0, factory_name.to_glib_none().0, properties.to_glib_full()))
        }
    }

    #[doc(alias = "wp_node_get_n_input_ports")]
    #[doc(alias = "get_n_input_ports")]
    pub fn n_input_ports(&self) -> (u32, u32) {
        unsafe {
            let mut max = mem::MaybeUninit::uninit();
            let ret = ffi::wp_node_get_n_input_ports(self.to_glib_none().0, max.as_mut_ptr());
            let max = max.assume_init();
            (ret, max)
        }
    }

    #[doc(alias = "wp_node_get_n_output_ports")]
    #[doc(alias = "get_n_output_ports")]
    pub fn n_output_ports(&self) -> (u32, u32) {
        unsafe {
            let mut max = mem::MaybeUninit::uninit();
            let ret = ffi::wp_node_get_n_output_ports(self.to_glib_none().0, max.as_mut_ptr());
            let max = max.assume_init();
            (ret, max)
        }
    }

    #[doc(alias = "wp_node_get_n_ports")]
    #[doc(alias = "get_n_ports")]
    pub fn n_ports(&self) -> u32 {
        unsafe {
            ffi::wp_node_get_n_ports(self.to_glib_none().0)
        }
    }

    #[doc(alias = "wp_node_get_state")]
    #[doc(alias = "get_state")]
    pub fn state(&self) -> (NodeState, glib::GString) {
        unsafe {
            let mut error = ptr::null();
            let ret = from_glib(ffi::wp_node_get_state(self.to_glib_none().0, &mut error));
            (ret, from_glib_none(error))
        }
    }

    //#[doc(alias = "wp_node_lookup_port")]
    //pub fn lookup_port(&self, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Option<Port> {
    //    unsafe { TODO: call ffi:wp_node_lookup_port() }
    //}

    #[doc(alias = "wp_node_lookup_port_full")]
    pub fn lookup_port_full(&self, interest: &ObjectInterest) -> Option<Port> {
        unsafe {
            from_glib_full(ffi::wp_node_lookup_port_full(self.to_glib_none().0, interest.to_glib_full()))
        }
    }

    //#[doc(alias = "wp_node_new_ports_filtered_iterator")]
    //pub fn new_ports_filtered_iterator(&self, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Option<Iterator> {
    //    unsafe { TODO: call ffi:wp_node_new_ports_filtered_iterator() }
    //}

    #[doc(alias = "wp_node_new_ports_filtered_iterator_full")]
    pub fn new_ports_filtered_iterator_full(&self, interest: &ObjectInterest) -> Option<Iterator> {
        unsafe {
            from_glib_full(ffi::wp_node_new_ports_filtered_iterator_full(self.to_glib_none().0, interest.to_glib_full()))
        }
    }

    #[doc(alias = "wp_node_new_ports_iterator")]
    pub fn new_ports_iterator(&self) -> Option<Iterator> {
        unsafe {
            from_glib_full(ffi::wp_node_new_ports_iterator(self.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_node_send_command")]
    pub fn send_command(&self, command: &str) {
        unsafe {
            ffi::wp_node_send_command(self.to_glib_none().0, command.to_glib_none().0);
        }
    }

    #[doc(alias = "max-input-ports")]
    pub fn max_input_ports(&self) -> u32 {
        unsafe {
            let mut value = glib::Value::from_type(<u32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"max-input-ports\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `max-input-ports` getter")
        }
    }

    #[doc(alias = "max-output-ports")]
    pub fn max_output_ports(&self) -> u32 {
        unsafe {
            let mut value = glib::Value::from_type(<u32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"max-output-ports\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `max-output-ports` getter")
        }
    }

    #[doc(alias = "ports-changed")]
    pub fn connect_ports_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn ports_changed_trampoline<F: Fn(&Node) + 'static>(this: *mut ffi::WpNode, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"ports-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(ports_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "state-changed")]
    pub fn connect_state_changed<F: Fn(&Self, NodeState, NodeState) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn state_changed_trampoline<F: Fn(&Node, NodeState, NodeState) + 'static>(this: *mut ffi::WpNode, object: ffi::WpNodeState, p0: ffi::WpNodeState, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this), from_glib(object), from_glib(p0))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"state-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(state_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "max-input-ports")]
    pub fn connect_max_input_ports_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_input_ports_trampoline<F: Fn(&Node) + 'static>(this: *mut ffi::WpNode, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::max-input-ports\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_max_input_ports_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "max-output-ports")]
    pub fn connect_max_output_ports_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_max_output_ports_trampoline<F: Fn(&Node) + 'static>(this: *mut ffi::WpNode, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::max-output-ports\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_max_output_ports_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "n-input-ports")]
    pub fn connect_n_input_ports_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_n_input_ports_trampoline<F: Fn(&Node) + 'static>(this: *mut ffi::WpNode, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::n-input-ports\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_n_input_ports_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "n-output-ports")]
    pub fn connect_n_output_ports_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_n_output_ports_trampoline<F: Fn(&Node) + 'static>(this: *mut ffi::WpNode, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::n-output-ports\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_n_output_ports_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "state")]
    pub fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<F: Fn(&Node) + 'static>(this: *mut ffi::WpNode, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::state\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_state_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
