// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct ObjectInterest(Shared<ffi::WpObjectInterest>);

    match fn {
        ref => |ptr| ffi::wp_object_interest_ref(ptr),
        unref => |ptr| ffi::wp_object_interest_unref(ptr),
        type_ => || ffi::wp_object_interest_get_type(),
    }
}

impl ObjectInterest {
    //#[doc(alias = "wp_object_interest_new")]
    //pub fn new(gtype: glib::types::Type, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> ObjectInterest {
    //    unsafe { TODO: call ffi:wp_object_interest_new() }
    //}

    #[doc(alias = "wp_object_interest_new_type")]
    pub fn new_type(gtype: glib::types::Type) -> ObjectInterest {
        unsafe {
            from_glib_full(ffi::wp_object_interest_new_type(gtype.into_glib()))
        }
    }

    //#[doc(alias = "wp_object_interest_new_valist")]
    //pub fn new_valist(gtype: glib::types::Type, args: /*Unknown conversion*//*Unimplemented*/Unsupported) -> ObjectInterest {
    //    unsafe { TODO: call ffi:wp_object_interest_new_valist() }
    //}

    //#[doc(alias = "wp_object_interest_add_constraint")]
    //pub fn add_constraint(&self, type_: ConstraintType, subject: &str, verb: ConstraintVerb, value: /*Ignored*/Option<&glib::Variant>) {
    //    unsafe { TODO: call ffi:wp_object_interest_add_constraint() }
    //}

    //#[doc(alias = "wp_object_interest_matches")]
    //pub fn matches(&self, object: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call ffi:wp_object_interest_matches() }
    //}

    //#[doc(alias = "wp_object_interest_matches_full")]
    //pub fn matches_full(&self, flags: InterestMatchFlags, object_type: glib::types::Type, object: /*Ignored*/Option<&glib::Object>, pw_props: Option<&Properties>, pw_global_props: Option<&Properties>) -> InterestMatch {
    //    unsafe { TODO: call ffi:wp_object_interest_matches_full() }
    //}

    //#[doc(alias = "wp_object_interest_validate")]
    //pub fn validate(&self, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:wp_object_interest_validate() }
    //}
}
