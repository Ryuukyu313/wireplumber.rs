// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct Iterator(Shared<ffi::WpIterator>);

    match fn {
        ref => |ptr| ffi::wp_iterator_ref(ptr),
        unref => |ptr| ffi::wp_iterator_unref(ptr),
        type_ => || ffi::wp_iterator_get_type(),
    }
}

impl Iterator {
    //#[doc(alias = "wp_iterator_new")]
    //pub fn new(methods: /*Ignored*/&IteratorMethods, user_size: usize) -> Iterator {
    //    unsafe { TODO: call ffi:wp_iterator_new() }
    //}

    //#[doc(alias = "wp_iterator_new_ptr_array")]
    //pub fn new_ptr_array(items: /*Unimplemented*/&[&Fundamental: Pointer], item_type: glib::types::Type) -> Iterator {
    //    unsafe { TODO: call ffi:wp_iterator_new_ptr_array() }
    //}

    //#[doc(alias = "wp_iterator_fold")]
    //pub fn fold(&self, func: /*Unimplemented*/FnMut(/*Ignored*/glib::Value, /*Ignored*/glib::Value, /*Unimplemented*/Option<Fundamental: Pointer>) -> bool, ret: /*Unimplemented*/glib::Value, data: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call ffi:wp_iterator_fold() }
    //}

    //#[doc(alias = "wp_iterator_foreach")]
    //pub fn foreach(&self, func: /*Unimplemented*/FnMut(/*Ignored*/glib::Value, /*Unimplemented*/Option<Fundamental: Pointer>), data: /*Unimplemented*/Option<Fundamental: Pointer>) -> bool {
    //    unsafe { TODO: call ffi:wp_iterator_foreach() }
    //}

    //#[doc(alias = "wp_iterator_get_user_data")]
    //#[doc(alias = "get_user_data")]
    //pub fn user_data(&self) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:wp_iterator_get_user_data() }
    //}

    //#[doc(alias = "wp_iterator_next")]
    //pub fn next(&self, item: /*Ignored*/glib::Value) -> bool {
    //    unsafe { TODO: call ffi:wp_iterator_next() }
    //}

    #[doc(alias = "wp_iterator_reset")]
    pub fn reset(&self) {
        unsafe {
            ffi::wp_iterator_reset(self.to_glib_none().0);
        }
    }
}
