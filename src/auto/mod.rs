// Generated by gir (https://github.com/gtk-rs/gir @ 0.14-2021-10-08)
// from /nix/store/7i7hi0ivv21w1n2n5b9gy7lfrhnkis9p-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/l8nlsw7p6xi30lna4gq3mvd574njnmly-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

mod client;
pub use self::client::{Client};

mod component_loader;
pub use self::component_loader::{ComponentLoader, NONE_COMPONENT_LOADER};

mod core;
pub use self::core::{Core};

mod device;
pub use self::device::{Device};

mod endpoint;
pub use self::endpoint::{Endpoint, NONE_ENDPOINT};

mod factory;
pub use self::factory::{Factory};

mod feature_activation_transition;
pub use self::feature_activation_transition::{FeatureActivationTransition};

mod global_proxy;
pub use self::global_proxy::{GlobalProxy, NONE_GLOBAL_PROXY};

mod impl_endpoint;
pub use self::impl_endpoint::{ImplEndpoint};

mod impl_metadata;
pub use self::impl_metadata::{ImplMetadata};

#[cfg(any(feature = "v0_4_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4_2")))]
mod impl_module;
#[cfg(any(feature = "v0_4_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4_2")))]
pub use self::impl_module::{ImplModule};

mod impl_node;
pub use self::impl_node::{ImplNode};

mod link;
pub use self::link::{Link};

mod metadata;
pub use self::metadata::{Metadata, NONE_METADATA};

mod node;
pub use self::node::{Node};

mod object;
pub use self::object::{Object, NONE_OBJECT};

mod object_manager;
pub use self::object_manager::{ObjectManager};

mod pipewire_object;
pub use self::pipewire_object::{PipewireObject, NONE_PIPEWIRE_OBJECT};

mod plugin;
pub use self::plugin::{Plugin, NONE_PLUGIN};

mod port;
pub use self::port::{Port};

mod proxy;
pub use self::proxy::{Proxy, NONE_PROXY};

mod session_item;
pub use self::session_item::{SessionItem, NONE_SESSION_ITEM};

mod si_acquisition;
pub use self::si_acquisition::{SiAcquisition, NONE_SI_ACQUISITION};

mod si_adapter;
pub use self::si_adapter::{SiAdapter, NONE_SI_ADAPTER};

mod si_endpoint;
pub use self::si_endpoint::{SiEndpoint, NONE_SI_ENDPOINT};

mod si_factory;
pub use self::si_factory::{SiFactory, NONE_SI_FACTORY};

mod si_link;
pub use self::si_link::{SiLink, NONE_SI_LINK};

mod si_linkable;
pub use self::si_linkable::{SiLinkable, NONE_SI_LINKABLE};

mod spa_device;
pub use self::spa_device::{SpaDevice};

mod state;
pub use self::state::{State};

mod transition;
pub use self::transition::{Transition, NONE_TRANSITION};

mod iterator;
pub use self::iterator::Iterator;

mod object_interest;
pub use self::object_interest::ObjectInterest;

mod properties;
pub use self::properties::Properties;

#[cfg(any(feature = "v0_4_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4_2")))]
mod properties_item;
#[cfg(any(feature = "v0_4_2", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4_2")))]
pub use self::properties_item::PropertiesItem;

mod spa_pod;
pub use self::spa_pod::SpaPod;

mod spa_pod_builder;
pub use self::spa_pod_builder::SpaPodBuilder;

mod spa_pod_parser;
pub use self::spa_pod_parser::SpaPodParser;

mod enums;
pub use self::enums::ConstraintType;
pub use self::enums::ConstraintVerb;
pub use self::enums::Direction;
pub use self::enums::LibraryErrorEnum;
pub use self::enums::NodeState;
pub use self::enums::TransitionStep;

mod flags;
pub use self::flags::InitFlags;
pub use self::flags::InterestMatch;
pub use self::flags::InterestMatchFlags;
pub use self::flags::LookupDirs;
pub use self::flags::MetadataFeatures;
pub use self::flags::NodeFeatures;
pub use self::flags::PluginFeatures;
pub use self::flags::ProxyFeatures;
pub use self::flags::SessionItemFeatures;
pub use self::flags::SpaDeviceFeatures;

mod alias;
pub use self::alias::ObjectFeatures;

#[doc(hidden)]
pub mod traits {
    pub use super::endpoint::EndpointExt;
    pub use super::global_proxy::GlobalProxyExt;
    pub use super::metadata::MetadataExt;
    pub use super::object::ObjectExt;
    pub use super::pipewire_object::PipewireObjectExt;
    pub use super::plugin::PluginExt;
    pub use super::proxy::ProxyExt;
    pub use super::session_item::SessionItemExt;
    pub use super::si_acquisition::SiAcquisitionExt;
    pub use super::si_adapter::SiAdapterExt;
    pub use super::si_endpoint::SiEndpointExt;
    pub use super::si_factory::SiFactoryExt;
    pub use super::si_link::SiLinkExt;
    pub use super::si_linkable::SiLinkableExt;
    pub use super::transition::TransitionExt;
}
