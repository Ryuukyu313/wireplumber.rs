// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::SessionItem;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct SiFactory(Object<ffi::WpSiFactory, ffi::WpSiFactoryClass>);

    match fn {
        type_ => || ffi::wp_si_factory_get_type(),
    }
}

impl SiFactory {
    #[doc(alias = "wp_si_factory_new_simple")]
    pub fn new_simple(factory_name: &str, si_type: glib::types::Type) -> SiFactory {
        unsafe {
            from_glib_full(ffi::wp_si_factory_new_simple(factory_name.to_glib_none().0, si_type.into_glib()))
        }
    }

    #[doc(alias = "wp_si_factory_find")]
    pub fn find(core: &Core, factory_name: &str) -> Option<SiFactory> {
        unsafe {
            from_glib_full(ffi::wp_si_factory_find(core.to_glib_none().0, factory_name.to_glib_none().0))
        }
    }

    #[doc(alias = "wp_si_factory_register")]
    pub fn register<P: IsA<SiFactory>>(core: &Core, factory: &P) {
        unsafe {
            ffi::wp_si_factory_register(core.to_glib_none().0, factory.as_ref().to_glib_full());
        }
    }
}

pub const NONE_SI_FACTORY: Option<&SiFactory> = None;

pub trait SiFactoryExt: 'static {
    #[doc(alias = "wp_si_factory_construct")]
    fn construct(&self, core: &Core) -> Option<SessionItem>;

    #[doc(alias = "wp_si_factory_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString>;
}

impl<O: IsA<SiFactory>> SiFactoryExt for O {
    fn construct(&self, core: &Core) -> Option<SessionItem> {
        unsafe {
            from_glib_full(ffi::wp_si_factory_construct(self.as_ref().to_glib_none().0, core.to_glib_none().0))
        }
    }

    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::wp_si_factory_get_name(self.as_ref().to_glib_none().0))
        }
    }
}

impl fmt::Display for SiFactory {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SiFactory")
    }
}
