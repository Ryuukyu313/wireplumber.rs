// Generated by gir (https://github.com/gtk-rs/gir @ 0.14-2021-10-08)
// from /nix/store/7i7hi0ivv21w1n2n5b9gy7lfrhnkis9p-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/l8nlsw7p6xi30lna4gq3mvd574njnmly-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::Properties;
use crate::Proxy;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "WpGlobalProxy")]
    pub struct GlobalProxy(Object<ffi::WpGlobalProxy, ffi::WpGlobalProxyClass>) @extends Proxy, Object;

    match fn {
        type_ => || ffi::wp_global_proxy_get_type(),
    }
}

pub const NONE_GLOBAL_PROXY: Option<&GlobalProxy> = None;

pub trait GlobalProxyExt: 'static {
    #[doc(alias = "wp_global_proxy_bind")]
    fn bind(&self) -> bool;

    #[doc(alias = "wp_global_proxy_get_global_properties")]
    #[doc(alias = "get_global_properties")]
    fn global_properties(&self) -> Option<Properties>;

    #[doc(alias = "wp_global_proxy_get_permissions")]
    #[doc(alias = "get_permissions")]
    fn permissions(&self) -> u32;

    #[doc(alias = "wp_global_proxy_request_destroy")]
    fn request_destroy(&self);

    #[doc(alias = "permissions")]
    fn connect_permissions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<GlobalProxy>> GlobalProxyExt for O {
    fn bind(&self) -> bool {
        unsafe {
            from_glib(ffi::wp_global_proxy_bind(self.as_ref().to_glib_none().0))
        }
    }

    fn global_properties(&self) -> Option<Properties> {
        unsafe {
            from_glib_full(ffi::wp_global_proxy_get_global_properties(self.as_ref().to_glib_none().0))
        }
    }

    fn permissions(&self) -> u32 {
        unsafe {
            ffi::wp_global_proxy_get_permissions(self.as_ref().to_glib_none().0)
        }
    }

    fn request_destroy(&self) {
        unsafe {
            ffi::wp_global_proxy_request_destroy(self.as_ref().to_glib_none().0);
        }
    }

    fn connect_permissions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_permissions_trampoline<P: IsA<GlobalProxy>, F: Fn(&P) + 'static>(this: *mut ffi::WpGlobalProxy, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(GlobalProxy::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::permissions\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_permissions_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}
