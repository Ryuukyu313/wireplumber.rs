// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::SessionItem;
use crate::SpaPod;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;
use std::ptr;

glib::wrapper! {
    pub struct SiAdapter(Interface<ffi::WpSiAdapter, ffi::WpSiAdapterInterface>) @requires SessionItem, Object;

    match fn {
        type_ => || ffi::wp_si_adapter_get_type(),
    }
}

pub const NONE_SI_ADAPTER: Option<&SiAdapter> = None;

pub trait SiAdapterExt: 'static {
    #[doc(alias = "wp_si_adapter_get_ports_format")]
    #[doc(alias = "get_ports_format")]
    fn ports_format(&self) -> (SpaPod, Option<glib::GString>);

    //#[doc(alias = "wp_si_adapter_set_ports_format")]
    //fn set_ports_format<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + Send + 'static>(&self, format: Option<&SpaPod>, mode: Option<&str>, callback: P);

    //
    //fn set_ports_format_future(&self, format: Option<&SpaPod>, mode: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>>;
}

impl<O: IsA<SiAdapter>> SiAdapterExt for O {
    fn ports_format(&self) -> (SpaPod, Option<glib::GString>) {
        unsafe {
            let mut mode = ptr::null();
            let ret = from_glib_full(ffi::wp_si_adapter_get_ports_format(self.as_ref().to_glib_none().0, &mut mode));
            (ret, from_glib_full(mode))
        }
    }

    //fn set_ports_format<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + Send + 'static>(&self, format: Option<&SpaPod>, mode: Option<&str>, callback: P) {
    //    unsafe { TODO: call ffi:wp_si_adapter_set_ports_format() }
    //}

    //
    //fn set_ports_format_future(&self, format: Option<&SpaPod>, mode: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let format = format.map(ToOwned::to_owned);
        //let mode = mode.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    obj.set_ports_format(
        //        format.as_ref().map(::std::borrow::Borrow::borrow),
        //        mode.as_ref().map(::std::borrow::Borrow::borrow),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );

        //    cancellable
        //}))
    //}
}

impl fmt::Display for SiAdapter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SiAdapter")
    }
}
