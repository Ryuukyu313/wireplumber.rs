// Generated by gir (https://github.com/gtk-rs/gir @ 0.14-2021-10-08)
// from /nix/store/7i7hi0ivv21w1n2n5b9gy7lfrhnkis9p-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/l8nlsw7p6xi30lna4gq3mvd574njnmly-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::SessionItem;
use crate::SpaPod;
use glib::object::IsA;
use glib::translate::*;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "WpSiAdapter")]
    pub struct SiAdapter(Interface<ffi::WpSiAdapter, ffi::WpSiAdapterInterface>) @requires SessionItem, Object;

    match fn {
        type_ => || ffi::wp_si_adapter_get_type(),
    }
}

pub const NONE_SI_ADAPTER: Option<&SiAdapter> = None;

pub trait SiAdapterExt: 'static {
    #[doc(alias = "wp_si_adapter_get_ports_format")]
    #[doc(alias = "get_ports_format")]
    fn ports_format(&self) -> (SpaPod, Option<glib::GString>);
}

impl<O: IsA<SiAdapter>> SiAdapterExt for O {
    fn ports_format(&self) -> (SpaPod, Option<glib::GString>) {
        unsafe {
            let mut mode = ptr::null();
            let ret = from_glib_full(ffi::wp_si_adapter_get_ports_format(self.as_ref().to_glib_none().0, &mut mode));
            (ret, from_glib_full(mode))
        }
    }
}
