// Generated by gir (https://github.com/gtk-rs/gir @ unstable-2021-11-21)
// from /nix/store/1gli05cgwhqdc8papdgi4y98l2xzssmq-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::SessionItem;
use crate::SpaPod;
use glib::object::IsA;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::pin::Pin;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "WpSiAdapter")]
    pub struct SiAdapter(Interface<ffi::WpSiAdapter, ffi::WpSiAdapterInterface>) @requires SessionItem, Object;

    match fn {
        type_ => || ffi::wp_si_adapter_get_type(),
    }
}

impl SiAdapter {
        pub const NONE: Option<&'static SiAdapter> = None;
    
}

pub trait SiAdapterExt: 'static {
    #[doc(alias = "wp_si_adapter_get_ports_format")]
    #[doc(alias = "get_ports_format")]
    fn ports_format(&self) -> (SpaPod, Option<glib::GString>);

    #[doc(alias = "wp_si_adapter_set_ports_format")]
    fn set_ports_format<P: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, format: Option<&SpaPod>, mode: Option<&str>, callback: P);

    
    fn set_ports_format_future(&self, format: Option<&SpaPod>, mode: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;
}

impl<O: IsA<SiAdapter>> SiAdapterExt for O {
    fn ports_format(&self) -> (SpaPod, Option<glib::GString>) {
        unsafe {
            let mut mode = ptr::null();
            let ret = from_glib_full(ffi::wp_si_adapter_get_ports_format(self.as_ref().to_glib_none().0, &mut mode));
            (ret, from_glib_full(mode))
        }
    }

    fn set_ports_format<P: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, format: Option<&SpaPod>, mode: Option<&str>, callback: P) {
        let user_data: Box_<P> = Box_::new(callback);
        unsafe extern "C" fn set_ports_format_trampoline<P: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::wp_si_adapter_set_ports_format_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<P> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = set_ports_format_trampoline::<P>;
        unimplemented!()
        /*unsafe {
            ffi::wp_si_adapter_set_ports_format(self.as_ref().to_glib_none().0, format.to_glib_full(), mode.to_glib_none().0, Some(callback), user_data.to_glib_none_mut().0);
        }*/
    }

    
    fn set_ports_format_future(&self, format: Option<&SpaPod>, mode: Option<&str>) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let format = format.map(ToOwned::to_owned);
        let mode = mode.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.set_ports_format(
                format.as_ref().map(::std::borrow::Borrow::borrow),
                mode.as_ref().map(::std::borrow::Borrow::borrow),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }
}

impl fmt::Display for SiAdapter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SiAdapter")
    }
}
