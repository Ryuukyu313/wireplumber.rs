// This file was generated by gir (https://github.com/gtk-rs/gir)
// DO NOT EDIT

use crate::Core;
use crate::Endpoint;
use crate::GlobalProxy;
use crate::Object;
use crate::PipewireObject;
use crate::Proxy;
use crate::SiEndpoint;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::translate::*;
use glib::StaticType;

glib::wrapper! {
    #[doc(alias = "WpImplEndpoint")]
    pub struct ImplEndpoint(Object<ffi::WpImplEndpoint, ffi::WpImplEndpointClass>) @extends Endpoint, GlobalProxy, Proxy, Object, @implements PipewireObject;

    match fn {
        type_ => || ffi::wp_impl_endpoint_get_type(),
    }
}

impl ImplEndpoint {
    #[doc(alias = "wp_impl_endpoint_new")]
    pub fn new<P: IsA<SiEndpoint>>(core: &Core, item: &P) -> ImplEndpoint {
        unsafe {
            from_glib_full(ffi::wp_impl_endpoint_new(core.to_glib_none().0, item.as_ref().to_glib_none().0))
        }
    }

    pub fn item(&self) -> Option<SiEndpoint> {
        unsafe {
            let mut value = glib::Value::from_type(<SiEndpoint as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"item\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `item` getter")
        }
    }
}
