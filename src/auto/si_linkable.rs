// Generated by gir (https://github.com/gtk-rs/gir @ unstable-2021-11-21)
// from /nix/store/1gli05cgwhqdc8papdgi4y98l2xzssmq-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::SessionItem;
use crate::SiAcquisition;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "WpSiLinkable")]
    pub struct SiLinkable(Interface<ffi::WpSiLinkable, ffi::WpSiLinkableInterface>) @requires SessionItem, Object;

    match fn {
        type_ => || ffi::wp_si_linkable_get_type(),
    }
}

impl SiLinkable {
        pub const NONE: Option<&'static SiLinkable> = None;
    
}

pub trait SiLinkableExt: 'static {
    #[doc(alias = "wp_si_linkable_get_acquisition")]
    #[doc(alias = "get_acquisition")]
    fn acquisition(&self) -> Option<SiAcquisition>;

    #[doc(alias = "wp_si_linkable_get_ports")]
    #[doc(alias = "get_ports")]
    fn ports(&self, context: Option<&str>) -> Option<glib::Variant>;
}

impl<O: IsA<SiLinkable>> SiLinkableExt for O {
    fn acquisition(&self) -> Option<SiAcquisition> {
        unsafe {
            from_glib_none(ffi::wp_si_linkable_get_acquisition(self.as_ref().to_glib_none().0))
        }
    }

    fn ports(&self, context: Option<&str>) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::wp_si_linkable_get_ports(self.as_ref().to_glib_none().0, context.to_glib_none().0))
        }
    }
}

impl fmt::Display for SiLinkable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SiLinkable")
    }
}
