// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::Properties;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    pub struct ImplModule(Object<ffi::WpImplModule, ffi::WpImplModuleClass>);

    match fn {
        type_ => || ffi::wp_impl_module_get_type(),
    }
}

impl ImplModule {
    pub fn arguments(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"arguments\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `arguments` getter")
        }
    }

    //pub fn core(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"core\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `core` getter")
    //    }
    //}

    pub fn name(&self) -> Option<glib::GString> {
        unsafe {
            let mut value = glib::Value::from_type(<glib::GString as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"name\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `name` getter")
        }
    }

    pub fn properties(&self) -> Option<Properties> {
        unsafe {
            let mut value = glib::Value::from_type(<Properties as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"properties\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `properties` getter")
        }
    }

    pub fn set_properties(&self, properties: Option<&Properties>) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"properties\0".as_ptr() as *const _, properties.to_value().to_glib_none().0);
        }
    }

    //#[doc(alias = "pw-impl-module")]
    //pub fn pw_impl_module(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"pw-impl-module\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `pw-impl-module` getter")
    //    }
    //}

    #[doc(alias = "wp_impl_module_load")]
    pub fn load(core: &Core, name: &str, arguments: Option<&str>, properties: Option<&Properties>) -> Option<ImplModule> {
        unsafe {
            from_glib_full(ffi::wp_impl_module_load(core.to_glib_none().0, name.to_glib_none().0, arguments.to_glib_none().0, properties.to_glib_none().0))
        }
    }

    #[doc(alias = "properties")]
    pub fn connect_properties_notify<F: Fn(&ImplModule) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_properties_trampoline<F: Fn(&ImplModule) + 'static>(this: *mut ffi::WpImplModule, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::properties\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_properties_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "pw-impl-module")]
    pub fn connect_pw_impl_module_notify<F: Fn(&ImplModule) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pw_impl_module_trampoline<F: Fn(&ImplModule) + 'static>(this: *mut ffi::WpImplModule, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pw-impl-module\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_pw_impl_module_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for ImplModule {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ImplModule")
    }
}
