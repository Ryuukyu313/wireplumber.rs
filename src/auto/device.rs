// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::GlobalProxy;
use crate::Object;
use crate::PipewireObject;
use crate::Properties;
use crate::Proxy;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct Device(Object<ffi::WpDevice, ffi::WpDeviceClass>) @extends GlobalProxy, Proxy, Object, @implements PipewireObject;

    match fn {
        type_ => || ffi::wp_device_get_type(),
    }
}

impl Device {
    #[doc(alias = "wp_device_new_from_factory")]
    #[doc(alias = "new_from_factory")]
    pub fn from_factory(core: &Core, factory_name: &str, properties: Option<&Properties>) -> Option<Device> {
        unsafe {
            from_glib_full(ffi::wp_device_new_from_factory(core.to_glib_none().0, factory_name.to_glib_none().0, properties.to_glib_full()))
        }
    }
}

impl fmt::Display for Device {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Device")
    }
}
