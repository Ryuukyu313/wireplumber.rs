// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Core;
use crate::Object;
use crate::PipewireObject;
use crate::Properties;
use crate::Proxy;
use glib::object::ObjectType as ObjectType_;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct ImplNode(Object<ffi::WpImplNode, ffi::WpImplNodeClass>) @extends Proxy, Object, @implements PipewireObject;

    match fn {
        type_ => || ffi::wp_impl_node_get_type(),
    }
}

impl ImplNode {
    #[doc(alias = "wp_impl_node_new_from_pw_factory")]
    #[doc(alias = "new_from_pw_factory")]
    pub fn from_pw_factory(core: &Core, factory_name: &str, properties: Option<&Properties>) -> Option<ImplNode> {
        unsafe {
            from_glib_full(ffi::wp_impl_node_new_from_pw_factory(core.to_glib_none().0, factory_name.to_glib_none().0, properties.to_glib_full()))
        }
    }

    //#[doc(alias = "wp_impl_node_new_wrap")]
    //pub fn new_wrap(core: &Core, node: /*Unimplemented*/Option<Fundamental: Pointer>) -> ImplNode {
    //    unsafe { TODO: call ffi:wp_impl_node_new_wrap() }
    //}

    //#[doc(alias = "pw-impl-node")]
    //pub fn pw_impl_node(&self) -> /*Unimplemented*/Fundamental: Pointer {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"pw-impl-node\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `pw-impl-node` getter")
    //    }
    //}
}

impl fmt::Display for ImplNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("ImplNode")
    }
}
