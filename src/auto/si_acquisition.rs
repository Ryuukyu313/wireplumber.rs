// Generated by gir (https://github.com/gtk-rs/gir @ unstable-2021-11-21)
// from /nix/store/1gli05cgwhqdc8papdgi4y98l2xzssmq-wireplumber.gir/share/gir-1.0 (@ ???)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::SessionItem;
use crate::SiLink;
use crate::SiLinkable;
use glib::object::IsA;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::pin::Pin;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "WpSiAcquisition")]
    pub struct SiAcquisition(Interface<ffi::WpSiAcquisition, ffi::WpSiAcquisitionInterface>) @requires SessionItem, Object;

    match fn {
        type_ => || ffi::wp_si_acquisition_get_type(),
    }
}

impl SiAcquisition {
        pub const NONE: Option<&'static SiAcquisition> = None;
    
}

pub trait SiAcquisitionExt: 'static {
    #[doc(alias = "wp_si_acquisition_acquire")]
    fn acquire<P: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, acquisitor: &impl IsA<SiLink>, item: &impl IsA<SiLinkable>, callback: P);

    
    fn acquire_future(&self, acquisitor: &(impl IsA<SiLink> + Clone + 'static), item: &(impl IsA<SiLinkable> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>>;

    #[doc(alias = "wp_si_acquisition_release")]
    fn release(&self, acquisitor: &impl IsA<SiLink>, item: &impl IsA<SiLinkable>);
}

impl<O: IsA<SiAcquisition>> SiAcquisitionExt for O {
    fn acquire<P: FnOnce(Result<(), glib::Error>) + Send + 'static>(&self, acquisitor: &impl IsA<SiLink>, item: &impl IsA<SiLinkable>, callback: P) {
        let user_data: Box_<P> = Box_::new(callback);
        unsafe extern "C" fn acquire_trampoline<P: FnOnce(Result<(), glib::Error>) + Send + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let _ = ffi::wp_si_acquisition_acquire_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) };
            let callback: Box_<P> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = acquire_trampoline::<P>;
        unimplemented!()
        /*unsafe {
            ffi::wp_si_acquisition_acquire(self.as_ref().to_glib_none().0, acquisitor.as_ref().to_glib_none().0, item.as_ref().to_glib_none().0, Some(callback), user_data.to_glib_none_mut().0);
        }*/
    }

    
    fn acquire_future(&self, acquisitor: &(impl IsA<SiLink> + Clone + 'static), item: &(impl IsA<SiLinkable> + Clone + 'static)) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {

        let acquisitor = acquisitor.clone();
        let item = item.clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.acquire(
                &acquisitor,
                &item,
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    fn release(&self, acquisitor: &impl IsA<SiLink>, item: &impl IsA<SiLinkable>) {
        unsafe {
            ffi::wp_si_acquisition_release(self.as_ref().to_glib_none().0, acquisitor.as_ref().to_glib_none().0, item.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for SiAcquisition {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SiAcquisition")
    }
}
