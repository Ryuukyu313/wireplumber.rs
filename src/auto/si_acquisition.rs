// Generated by gir (https://github.com/gtk-rs/gir @ c148542)
// from /nix/store/5njndanmnlsxkgl5yyrmkfs8a4909cxa-gobject-introspection-1.70.0-dev/share/gir-1.0 (@ ???)
// from /nix/store/h9500ckrbcbv20q4qsj87q3rnp01fmxx-wireplumber.gir/share/gir-1.0 (@ ???)
// DO NOT EDIT

use crate::Object;
use crate::SessionItem;
use crate::SiLink;
use crate::SiLinkable;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    pub struct SiAcquisition(Interface<ffi::WpSiAcquisition, ffi::WpSiAcquisitionInterface>) @requires SessionItem, Object;

    match fn {
        type_ => || ffi::wp_si_acquisition_get_type(),
    }
}

pub const NONE_SI_ACQUISITION: Option<&SiAcquisition> = None;

pub trait SiAcquisitionExt: 'static {
    //#[doc(alias = "wp_si_acquisition_acquire")]
    //fn acquire<P: IsA<SiLink>, Q: IsA<SiLinkable>, R: FnOnce(Result<(), /*Ignored*/glib::Error>) + Send + 'static>(&self, acquisitor: &P, item: &Q, callback: R);

    //
    //fn acquire_future<P: IsA<SiLink> + Clone + 'static, Q: IsA<SiLinkable> + Clone + 'static>(&self, acquisitor: &P, item: &Q) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>>;

    #[doc(alias = "wp_si_acquisition_release")]
    fn release<P: IsA<SiLink>, Q: IsA<SiLinkable>>(&self, acquisitor: &P, item: &Q);
}

impl<O: IsA<SiAcquisition>> SiAcquisitionExt for O {
    //fn acquire<P: IsA<SiLink>, Q: IsA<SiLinkable>, R: FnOnce(Result<(), /*Ignored*/glib::Error>) + Send + 'static>(&self, acquisitor: &P, item: &Q, callback: R) {
    //    unsafe { TODO: call ffi:wp_si_acquisition_acquire() }
    //}

    //
    //fn acquire_future<P: IsA<SiLink> + Clone + 'static, Q: IsA<SiLinkable> + Clone + 'static>(&self, acquisitor: &P, item: &Q) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let acquisitor = acquisitor.clone();
        //let item = item.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, send| {
        //    let cancellable = gio::Cancellable::new();
        //    obj.acquire(
        //        &acquisitor,
        //        &item,
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );

        //    cancellable
        //}))
    //}

    fn release<P: IsA<SiLink>, Q: IsA<SiLinkable>>(&self, acquisitor: &P, item: &Q) {
        unsafe {
            ffi::wp_si_acquisition_release(self.as_ref().to_glib_none().0, acquisitor.as_ref().to_glib_none().0, item.as_ref().to_glib_none().0);
        }
    }
}

impl fmt::Display for SiAcquisition {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SiAcquisition")
    }
}
